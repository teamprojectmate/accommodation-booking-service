import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Notification from '../../components/Notification';
import {
  fetchBookings,
  deleteBooking,
  updateBooking
} from '../../store/slices/bookingsSlice';
import '../../styles/components/_admin.scss';

const AdminBookings = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);
  const { bookings, status, error } = useSelector((state) => state.bookings);

  const [confirmCancelId, setConfirmCancelId] = useState(null);

  useEffect(() => {
    if (!user || user.role !== 'MANAGER') {
      navigate('/');
      return;
    }
    dispatch(fetchBookings());
  }, [user, navigate, dispatch]);

  const handleCancelBooking = async (id) => {
    await dispatch(deleteBooking(id));
    dispatch(fetchBookings()); // üîÑ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    setConfirmCancelId(null);
  };

  const handleMarkAsPaid = (booking) => {
    dispatch(
      updateBooking({
        id: booking.id,
        bookingData: { ...booking, status: 'PAID' }
      })
    );
  };

  if (status === 'loading') {
    return (
      <div className="container admin-page-container text-center">
        <h1 className="section-heading">–£—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å)</h1>
        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
      </div>
    );
  }

  return (
    <div className="container admin-page-container">
      <h1 className="section-heading text-center">–£—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å)</h1>
      {error && <Notification message={error} type="danger" />}
      {bookings.length > 0 ? (
        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>–ü–æ–º–µ—à–∫–∞–Ω–Ω—è ID</th>
              <th>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID</th>
              <th>–î–∞—Ç–∏</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î—ñ—ó</th>
            </tr>
          </thead>
          <tbody>
            {bookings.map((booking) => (
              <tr key={booking.id}>
                <td>{booking.id}</td>
                <td>{booking.accommodationId}</td>
                <td>{booking.userId}</td>
                <td>
                  {new Date(booking.checkInDate).toLocaleDateString()} ‚Äì{' '}
                  {new Date(booking.checkOutDate).toLocaleDateString()}
                </td>
                <td>{booking.status}</td>
                <td>
                  {booking.status !== 'PAID' ? (
                    <button
                      onClick={() => handleMarkAsPaid(booking)}
                      className="btn-primary btn-sm"
                    >
                      –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –æ–ø–ª–∞—á–µ–Ω–µ
                    </button>
                  ) : (
                    <span className="text-success">–û–ø–ª–∞—á–µ–Ω–æ</span>
                  )}
                  <button
                    onClick={() => setConfirmCancelId(booking.id)}
                    className="btn-danger btn-sm btn-action"
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <div className="alert-info text-center">–ë—Ä–æ–Ω—é–≤–∞–Ω—å —â–µ –Ω–µ–º–∞—î.</div>
      )}

      {confirmCancelId && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h5 className="modal-title">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è</h5>
            <p>–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?</p>
            <div className="modal-footer">
              <button
                type="button"
                className="btn-secondary"
                onClick={() => setConfirmCancelId(null)}
              >
                –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
              </button>
              <button
                type="button"
                className="btn-danger"
                onClick={() => handleCancelBooking(confirmCancelId)}
              >
                –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminBookings;
