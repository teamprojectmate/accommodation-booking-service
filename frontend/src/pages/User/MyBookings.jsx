import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Notification from '../../components/Notification';
import {
  fetchMyBookings,
  setPage,
  cancelBooking
} from '../../store/slices/bookingsSlice';
import { getAccommodationById } from '../../api/accommodations/accommodationService';
import Pagination from '../../components/Pagination';
import BookingCard from '../../components/BookingCard';
import '../../styles/components/_cards.scss';

const MyBookings = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [notification, setNotification] = useState({ message: '', type: '' });
  const [enrichedBookings, setEnrichedBookings] = useState([]);

  const { isAuthenticated } = useSelector((state) => state.auth);
  const { bookings, status, error, page, totalPages, totalElements } = useSelector(
    (state) => state.bookings
  );

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }
    dispatch(fetchMyBookings({ page, size: 5 }));
  }, [isAuthenticated, navigate, dispatch, page]);

  // üîπ –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—É—Å—Ç–∞ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Üí –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é
  useEffect(() => {
    if (status === 'succeeded' && bookings.length === 0 && page > 0) {
      dispatch(setPage(page - 1));
      dispatch(fetchMyBookings({ page: page - 1, size: 5 }));
    }
  }, [status, bookings, page, dispatch]);

  // üîπ –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∏—Ç–ª–∞
  useEffect(() => {
    const fetchAccommodations = async () => {
      if (!bookings || bookings.length === 0) {
        setEnrichedBookings([]);
        return;
      }

      try {
        const results = await Promise.all(
          bookings.map(async (booking) => {
            try {
              const acc = await getAccommodationById(booking.accommodationId);
              return { ...booking, accommodation: acc };
            } catch (err) {
              console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–∏—Ç–ª–æ –¥–ª—è bookingId=${booking.id}`);
              return { ...booking, accommodation: null };
            }
          })
        );
        setEnrichedBookings(results);
      } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∏—Ç–ª–∞:', err);
      }
    };

    fetchAccommodations();
  }, [bookings]);

  const handlePageChange = (newPage) => {
    dispatch(setPage(newPage));
  };

  const handleCancelBooking = async (bookingId) => {
    try {
      await dispatch(cancelBooking(bookingId)).unwrap();
      setNotification({
        message: '–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!',
        type: 'success'
      });
    } catch (err) {
      setNotification({
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.',
        type: 'danger'
      });
    }
  };

  if (status === 'loading') {
    return (
      <div className="container page">
        <h1 className="text-center">–ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</h1>
        <p className="text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
      </div>
    );
  }

  const filteredBookings = enrichedBookings.filter(
    (booking) => booking.status !== 'CANCELED'
  );

  const hasBookings = totalElements > 0;
  const hasActiveBookingsOnThisPage = filteredBookings.length > 0;

  return (
    <div className="container page">
      <h1 className="text-center">–ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è</h1>
      {error && <Notification message={error} type="danger" />}

      {hasActiveBookingsOnThisPage ? (
        <>
          <div className="bookings-row">
            {filteredBookings.map((booking) => (
              <BookingCard
                key={booking.id}
                booking={booking}
                onCancel={handleCancelBooking}
              />
            ))}
          </div>

          {totalPages > 1 && (
            <div className="pagination-wrapper">
              <Pagination
                page={page}
                totalPages={totalPages}
                onPageChange={handlePageChange}
              />
            </div>
          )}
        </>
      ) : (
        <>
          {hasBookings ? (
            <p className="text-center mt-5">
              –ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ{' '}
              <button
                className="btn btn-link p-0 align-baseline"
                onClick={() => handlePageChange(0)}
              >
                –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
              </button>{' '}
              –∞–±–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —ñ–Ω—à—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
            </p>
          ) : (
            <p className="text-center mt-5">–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.</p>
          )}

          {totalPages > 1 && (
            <div className="pagination-wrapper">
              <Pagination
                page={page}
                totalPages={totalPages}
                onPageChange={handlePageChange}
              />
            </div>
          )}
        </>
      )}

      <Notification message={notification.message} type={notification.type} />
    </div>
  );
};

export default MyBookings;
